---
title: Avoiding sneaky operator overloads
---

== Comma ==

When you write <code>x, y</code> in generic code, most of the time you intend that to mean "evaluate <code>x</code>, then evaluate <code>y</code> and make that the result". But since <code>operator,</code> can be overloaded, this could end up meaning something else entirely.

A simple workaround is to stick a <code>void()</code> in between the two expressions:

<source lang="cpp">
x, void(), y
</source>

Since you can't take a <code>void</code> parameter, there's no way for this to result in a call to an overloaded <code>operator,</code>.

[[Category:Tips and tricks]]
[[Category:C++]]

